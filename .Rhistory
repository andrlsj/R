demo()
library(C50)
data(churn)
variable.list = !names(churnTrain) %in% c('state','area_code','account_length')
churnTrain=churnTrain[,variable.list]
str(churnTrain)
set.seed(2)
ind<-sample(1:2, size=nrow(churnTrain), replace=T, prob=c(0.7, 0.3))
trainset=churnTrain[ind==1,]
testset=churnTrain[ind==2,]
churn.rp<-rpart(churn ~., data=trainset)
churn.rp<-rpart(churn ~., data=trainset)
install.packages('rpart')
churn.rp<-rpart(churn ~., data=trainset)
library('rpart')
churn.rp<-rpart(churn ~., data=trainset)
churn.rp
summary(churn.rp)
par(mfrow=c(1,1))
plot(churn.rp, uniform=TRUE,branch = 0.6, margin=0.1)
text(churn.rp, all=TRUE, use.n=TRUE)
min(churn.rp$cptable[,"xerror"])
which.min(churn.rp$cptable[,"xerror"])
churn.cp = churn.rp$cptable[which.min(churn.rp$cptable[,"xerror"]), "CP"]
prune.tree=prune(churn.rp, cp=churn.cp)
plot(prune.tree, margin=0.1)
text(prune.tree, all=TRUE, use.n=TRUE, cex=0.7)
predictions <-predict(prune.tree, testset)
table(testset$churn, predictions)
table(testset$churn, predictions)
predictions <-predict(prune.tree, testset,type = "class")
table(testset$churn, predictions)
library(caret)
library(e1071)
confusionMatrix(table(predictions, testset$churn))
library(caret)
control=trainControl(method="repeatedcv", number=10, repeats=3)
model =train(churn~., data=trainset, method="rpart", trControl=control)
table(predictions,testset$churn)
confusionMatrix(table(predictions,testset$churn))
install.packages("ROCR")
library(ROCR)
library(ROCR)
predictions = predict(churn.rp,testset,type = "prob")
predictions = predict(churn.rp,testset,type = "prob")
head(predictions)
pred.to.roc<-predictions[, 1]
head(pred.to.roc)
pred.rocr<-prediction(pred.to.roc, testset$churn)
pred.rocr
library('rpart')
churn.rp<-rpart(churn ~., data=trainset)
#ctree
#install.packages("party")
library('party')
ctree.model = ctree(churn ~ . , data = trainset)
#C5.0
library(C50)
c50.model = C5.0(churn ~., data=trainset)
rp.predict.prob = predict(churn.rp, testset,type='prob')
c50.predict.prob = predict(c50.model,testset,type='prob')
ctree.predict.prob = sapply(predict(ctree.model ,testset,type='prob'),function(e){unlist(e)[1]})
rp.prediction = prediction(rp.predict.prob[,1],testset$churn)
c50.prediction = prediction(c50.predict.prob[,1],testset$churn)
ctree.prediction = prediction(ctree.predict.prob,testset$churn)
rp.performance = performance(rp.prediction, "tpr","fpr")
c50.performance = performance(c50.prediction, "tpr","fpr")
ctree.performance = performance(ctree.prediction, "tpr","fpr")
plot(rp.performance,col='red')
plot(c50.performance, add=T,col='green')
plot(ctree.performance, add=T,col='blue')
x =c(0, 0, 1, 1, 1, 1)
y =c(1, 0, 1, 1, 0, 1)
dist(rbind(x,y),method = "eucildean")
dist(rbind(x,y),method = "euclidean")
rbind(x,y)
sqrt(2)
dist(rbind(x,y), method ="minkowski", p=2)
dist(rbind(x,y), method ="manhattan")
sum(abs(x-y))
dist(rbind(x,y), method ="minkowski", p=1)
dis(rbind(ribind(x,y),z),method ="manhattan")
dist(rbind(ribind(x,y),z),method ="manhattan")
dist(rbind(rbind(x,y),z),method ="manhattan")
z = c(1,1,1,1,1,1)
dist(rbind(rbind(x,y),z),method ="manhattan")
rbind(ribind(x,y),z)
rbind(rbind(x,y),z)
dist(rbind(rbind(x,y),z),method ="euclidean")
customer=read.csv('E:\\R\\teacherData\\data',header=TRUE)')
head(customer)
customer=read.csv('E:\\R\\teacherData\\data',header=TRUE')
head(customer)
customer=read.csv('E:\\R\\teacherData\\data',header=TRUE)
pwd
head(customer)
setwd("E:/R")
customer=read.csv('E:\\R\\teacherData\\data',header=TRUE)
customer=read.csv('E:\\R\\teacherData\\data\\customer.csv',header=TRUE)
head(customer)
str(customer)
customer_s = scale(customer[,-1])
roudn(mead(customer_s[,-1]))
round(mead(customer_s[,-1]))
round(mean(customer_s[,-1]))
round(sd(customer_s[,-1]))
hc = hclust(dist(customer_s),method = "euclidean"),methods(wd.d2)
hc = hclust(dist(customer_s),method = "euclidean"),methods=ward.d2)
hc = hclust(dist(customer_s),method = "euclidean"),method="ward.d2")
hc = hclust(dist(customer_s),method = "euclidean"), method="ward.d2")
hc = hclust(dist(customer_s),method = "euclidean"),method="ward.d2")
hc = hclust(dist(customer_s,method = "euclidean"),method="ward.d2")
hc = hclust(dist(customer_s,method = "euclidean"),method="ward.D2")
plot(hc,hang =-0.01,cex=0.7)
hc3 = hclust(dist(customer),method = "single")
plot(hc3,hang =-0.01,cex=0.7)
install.packages('cluster')
library(cluster)
?diana
dv =diana(customer, metric ="euclidean")
summary(dv)
plot(dv)
?hclust
dv =diana(customer_s, metric ="euclidean")
summary(dv)
plot(dv)
summary(dv)
plot(dv)
?diana
?cutree
fit = cutree(hc,k=4)
fit
?kmeans
barplot(t(fit$centers),beside = TRUE,xlab = "cluster",ylab = "value")
?kmeans
barplot(t(fit$centers), beside =TRUE,xlab="cluster", ylab="value")
str(customer_s)
set.seed(22)
fit =kmeans(customer_s, centers=4)
barplot(t(fit$centers), beside =TRUE,xlab="cluster", ylab="value")
set.seed(22)
data(iris)
iris_s=scale(iris[,-5])
str(iris)
str(iris_s)
head(iris_s)
fit = kmeans(iris_s,3)
fit
barplot(t(fit$centers),beside = T,xlab="cluster", ylab="value")
plot(iris, col=fit$cluster)
plot(iris$Petal.Length, iris$Petal.Width, col=fit$cluster)
head(iris)
head(iris_s)
head(iris)
fit
set.seed(22)
km =kmeans(customer_s, 4)
kms=silhouette(km$cluster,dist(customer_s))
summary(kms)
plot(kms)
sapply(nk, function(k){})
nk=2:10
sapply(nk, function(k){})
set.seed(22)
WSS =sapply(nk, function(k){kmeans(customer_s, centers=k)$tot.withinss})
WSS
plot(x=nk, y=WSS, type="l", xlab="number of k", ylab="within sum of squares")
install.packages("fpc")
library(fpc)
nk=2:10
SW =sapply(nk, function(k){set.seed(22);cluster.stats(dist(customer), kmeans(customer, centers=k)$cluster)$avg.silwidth})
kmeans(customer, centers=2)
?cluster.stats
cluster.stats(dist(customer), kmeans(customer, centers=2)$cluster)
plot(x=nk, y=SW, type="l", xlab="number of clusers", ylab="average silhouette width")
nk[which.max(SW)]
install.packages("mlbench")
library(mlbench)
library(fpc)
set.seed(2)
p = mlbench.cassini(500)
plot(p$x)
?mlbench.cassini
ds = dbscan(data = dist(p$x),eps= 0.2, MinPts = 2, method="dist")
ds
plot(ds, p$x)
ds = dbscan(data = dist(p$x),eps= 0.2, MinPts = 3, method="dist")
ds
plot(ds, p$x)
y = matrix(0,nrow=3,ncol=2)
ds = dbscan(data = dist(p$x),eps= 0.2, MinPts = 4, method="dist")
ds
plot(ds, p$x)
